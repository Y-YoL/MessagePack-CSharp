// <auto-generated />

#if ENABLE_UNITY_MATHEMATICS
using System;
using System.Runtime.InteropServices;
using MessagePack.Formatters;
using global::Unity.Mathematics;

namespace MessagePack.Unity.Mathematics
{
    public abstract class Vector2FormatterBase<TResult, TValue> : IMessagePackFormatter<TResult>
        where TResult : struct
        where TValue : struct
    {
        public abstract void Serialize(ref MessagePackWriter writer, TResult value, MessagePackSerializerOptions options);

        public TResult Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            TValue x, y;
            var resolver = options.Resolver.GetFormatterWithVerify<TValue>();
            switch (reader.ReadArrayHeader())
            {
                case 1:
                    x = resolver.Deserialize(ref reader, options);
                    return Create(x);
                case 2:
                    x = resolver.Deserialize(ref reader, options);
                    y = resolver.Deserialize(ref reader, options);
                    return Create(x, y);
            }

            throw new InvalidOperationException();
        }

        protected abstract TResult Create(TValue x);
        protected abstract TResult Create(TValue x, TValue y);
    }

    public abstract class Vector3FormatterBase<TResult, TValue> : IMessagePackFormatter<TResult>
        where TResult : struct
        where TValue : struct
    {
        public abstract void Serialize(ref MessagePackWriter writer, TResult value, MessagePackSerializerOptions options);

        public TResult Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            TValue x, y, z;
            var resolver = options.Resolver.GetFormatterWithVerify<TValue>();
            switch (reader.ReadArrayHeader())
            {
                case 1:
                    x = resolver.Deserialize(ref reader, options);
                    return Create(x);
                case 3:
                    x = resolver.Deserialize(ref reader, options);
                    y = resolver.Deserialize(ref reader, options);
                    z = resolver.Deserialize(ref reader, options);
                    return Create(x, y, z);
            }

            throw new InvalidOperationException();
        }

        protected abstract TResult Create(TValue x);
        protected abstract TResult Create(TValue x, TValue y, TValue z);
    }

    public abstract class Vector4FormatterBase<TResult, TValue> : IMessagePackFormatter<TResult>
        where TResult : struct
        where TValue : struct
    {
        public abstract void Serialize(ref MessagePackWriter writer, TResult value, MessagePackSerializerOptions options);

        public TResult Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            TValue x, y, z, w;
            var resolver = options.Resolver.GetFormatterWithVerify<TValue>();
            switch (reader.ReadArrayHeader())
            {
                case 1:
                    x = resolver.Deserialize(ref reader, options);
                    return Create(x);
                case 4:
                    x = resolver.Deserialize(ref reader, options);
                    y = resolver.Deserialize(ref reader, options);
                    z = resolver.Deserialize(ref reader, options);
                    w = resolver.Deserialize(ref reader, options);
                    return Create(x, y, z, w);
            }

            throw new InvalidOperationException();
        }

        protected abstract TResult Create(TValue x);
        protected abstract TResult Create(TValue x, TValue y, TValue z, TValue w);
    }

    public class MatrixFormatterBase<T>
        where T : struct
    {
        protected void Serialize(ref MessagePackWriter writer, ReadOnlySpan<T> value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(value.Length);
            var formatter = options.Resolver.GetFormatterWithVerify<T>();
            foreach (var item in value)
            {
                formatter.Serialize(ref writer, item, options);
            }
        }

        protected void Deserialize(ref MessagePackReader reader, Span<T> value, int length, MessagePackSerializerOptions options)
        {
            var formatter = options.Resolver.GetFormatterWithVerify<T>();
            for (var i = 0; i < length; i++)
            {
                if (value.Length > i)
                {
                    value[i] = formatter.Deserialize(ref reader, options);
                }
                else
                {
                    reader.Skip();
                }
            }
        }
    }

    public sealed class Int2Formatter : Vector2FormatterBase<int2, int>
    {
        public override void Serialize(ref MessagePackWriter writer, int2 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override int2 Create(int x)
        {
            return new int2(x);
        }

        protected override int2 Create(int x, int y)
        {
            return new int2(x, y);
        }
    }

    public sealed class Int3Formatter : Vector3FormatterBase<int3, int>
    {
        public override void Serialize(ref MessagePackWriter writer, int3 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override int3 Create(int x)
        {
            return new int3(x);
        }

        protected override int3 Create(int x, int y, int z)
        {
            return new int3(x, y, z);
        }
    }

    public sealed class Int4Formatter : Vector4FormatterBase<int4, int>
    {
        public override void Serialize(ref MessagePackWriter writer, int4 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override int4 Create(int x)
        {
            return new int4(x);
        }

        protected override int4 Create(int x, int y, int z, int w)
        {
            return new int4(x, y, z, w);
        }
    }

    public sealed class Uint2Formatter : Vector2FormatterBase<uint2, uint>
    {
        public override void Serialize(ref MessagePackWriter writer, uint2 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override uint2 Create(uint x)
        {
            return new uint2(x);
        }

        protected override uint2 Create(uint x, uint y)
        {
            return new uint2(x, y);
        }
    }

    public sealed class Uint3Formatter : Vector3FormatterBase<uint3, uint>
    {
        public override void Serialize(ref MessagePackWriter writer, uint3 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override uint3 Create(uint x)
        {
            return new uint3(x);
        }

        protected override uint3 Create(uint x, uint y, uint z)
        {
            return new uint3(x, y, z);
        }
    }

    public sealed class Uint4Formatter : Vector4FormatterBase<uint4, uint>
    {
        public override void Serialize(ref MessagePackWriter writer, uint4 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override uint4 Create(uint x)
        {
            return new uint4(x);
        }

        protected override uint4 Create(uint x, uint y, uint z, uint w)
        {
            return new uint4(x, y, z, w);
        }
    }

    public sealed class Float2Formatter : Vector2FormatterBase<float2, float>
    {
        public override void Serialize(ref MessagePackWriter writer, float2 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override float2 Create(float x)
        {
            return new float2(x);
        }

        protected override float2 Create(float x, float y)
        {
            return new float2(x, y);
        }
    }

    public sealed class Float3Formatter : Vector3FormatterBase<float3, float>
    {
        public override void Serialize(ref MessagePackWriter writer, float3 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override float3 Create(float x)
        {
            return new float3(x);
        }

        protected override float3 Create(float x, float y, float z)
        {
            return new float3(x, y, z);
        }
    }

    public sealed class Float4Formatter : Vector4FormatterBase<float4, float>
    {
        public override void Serialize(ref MessagePackWriter writer, float4 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override float4 Create(float x)
        {
            return new float4(x);
        }

        protected override float4 Create(float x, float y, float z, float w)
        {
            return new float4(x, y, z, w);
        }
    }

    public sealed class Double2Formatter : Vector2FormatterBase<double2, double>
    {
        public override void Serialize(ref MessagePackWriter writer, double2 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override double2 Create(double x)
        {
            return new double2(x);
        }

        protected override double2 Create(double x, double y)
        {
            return new double2(x, y);
        }
    }

    public sealed class Double3Formatter : Vector3FormatterBase<double3, double>
    {
        public override void Serialize(ref MessagePackWriter writer, double3 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override double3 Create(double x)
        {
            return new double3(x);
        }

        protected override double3 Create(double x, double y, double z)
        {
            return new double3(x, y, z);
        }
    }

    public sealed class Double4Formatter : Vector4FormatterBase<double4, double>
    {
        public override void Serialize(ref MessagePackWriter writer, double4 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override double4 Create(double x)
        {
            return new double4(x);
        }

        protected override double4 Create(double x, double y, double z, double w)
        {
            return new double4(x, y, z, w);
        }
    }

    public sealed class Half2Formatter : Vector2FormatterBase<half2, half>
    {
        public override void Serialize(ref MessagePackWriter writer, half2 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override half2 Create(half x)
        {
            return new half2(x);
        }

        protected override half2 Create(half x, half y)
        {
            return new half2(x, y);
        }
    }

    public sealed class Half3Formatter : Vector3FormatterBase<half3, half>
    {
        public override void Serialize(ref MessagePackWriter writer, half3 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override half3 Create(half x)
        {
            return new half3(x);
        }

        protected override half3 Create(half x, half y, half z)
        {
            return new half3(x, y, z);
        }
    }

    public sealed class Half4Formatter : Vector4FormatterBase<half4, half>
    {
        public override void Serialize(ref MessagePackWriter writer, half4 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override half4 Create(half x)
        {
            return new half4(x);
        }

        protected override half4 Create(half x, half y, half z, half w)
        {
            return new half4(x, y, z, w);
        }
    }

    public sealed class Int2x2Formatter : MatrixFormatterBase<int>, IMessagePackFormatter<int2x2>
    {
        public void Serialize(ref MessagePackWriter writer, int2x2 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 4);
            base.Serialize(ref writer, span, options);
        }

        public int2x2 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<int>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new int2x2(v);
                default:
                    var value = default(int2x2);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 4);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Int2x3Formatter : MatrixFormatterBase<int>, IMessagePackFormatter<int2x3>
    {
        public void Serialize(ref MessagePackWriter writer, int2x3 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 6);
            base.Serialize(ref writer, span, options);
        }

        public int2x3 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<int>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new int2x3(v);
                default:
                    var value = default(int2x3);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 6);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Int2x4Formatter : MatrixFormatterBase<int>, IMessagePackFormatter<int2x4>
    {
        public void Serialize(ref MessagePackWriter writer, int2x4 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 8);
            base.Serialize(ref writer, span, options);
        }

        public int2x4 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<int>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new int2x4(v);
                default:
                    var value = default(int2x4);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 8);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Int3x2Formatter : MatrixFormatterBase<int>, IMessagePackFormatter<int3x2>
    {
        public void Serialize(ref MessagePackWriter writer, int3x2 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 6);
            base.Serialize(ref writer, span, options);
        }

        public int3x2 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<int>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new int3x2(v);
                default:
                    var value = default(int3x2);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 6);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Int3x3Formatter : MatrixFormatterBase<int>, IMessagePackFormatter<int3x3>
    {
        public void Serialize(ref MessagePackWriter writer, int3x3 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 9);
            base.Serialize(ref writer, span, options);
        }

        public int3x3 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<int>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new int3x3(v);
                default:
                    var value = default(int3x3);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 9);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Int3x4Formatter : MatrixFormatterBase<int>, IMessagePackFormatter<int3x4>
    {
        public void Serialize(ref MessagePackWriter writer, int3x4 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 12);
            base.Serialize(ref writer, span, options);
        }

        public int3x4 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<int>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new int3x4(v);
                default:
                    var value = default(int3x4);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 12);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Int4x2Formatter : MatrixFormatterBase<int>, IMessagePackFormatter<int4x2>
    {
        public void Serialize(ref MessagePackWriter writer, int4x2 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 8);
            base.Serialize(ref writer, span, options);
        }

        public int4x2 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<int>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new int4x2(v);
                default:
                    var value = default(int4x2);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 8);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Int4x3Formatter : MatrixFormatterBase<int>, IMessagePackFormatter<int4x3>
    {
        public void Serialize(ref MessagePackWriter writer, int4x3 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 12);
            base.Serialize(ref writer, span, options);
        }

        public int4x3 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<int>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new int4x3(v);
                default:
                    var value = default(int4x3);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 12);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Int4x4Formatter : MatrixFormatterBase<int>, IMessagePackFormatter<int4x4>
    {
        public void Serialize(ref MessagePackWriter writer, int4x4 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 16);
            base.Serialize(ref writer, span, options);
        }

        public int4x4 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<int>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new int4x4(v);
                default:
                    var value = default(int4x4);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 16);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Uint2x2Formatter : MatrixFormatterBase<uint>, IMessagePackFormatter<uint2x2>
    {
        public void Serialize(ref MessagePackWriter writer, uint2x2 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 4);
            base.Serialize(ref writer, span, options);
        }

        public uint2x2 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<uint>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new uint2x2(v);
                default:
                    var value = default(uint2x2);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 4);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Uint2x3Formatter : MatrixFormatterBase<uint>, IMessagePackFormatter<uint2x3>
    {
        public void Serialize(ref MessagePackWriter writer, uint2x3 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 6);
            base.Serialize(ref writer, span, options);
        }

        public uint2x3 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<uint>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new uint2x3(v);
                default:
                    var value = default(uint2x3);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 6);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Uint2x4Formatter : MatrixFormatterBase<uint>, IMessagePackFormatter<uint2x4>
    {
        public void Serialize(ref MessagePackWriter writer, uint2x4 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 8);
            base.Serialize(ref writer, span, options);
        }

        public uint2x4 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<uint>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new uint2x4(v);
                default:
                    var value = default(uint2x4);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 8);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Uint3x2Formatter : MatrixFormatterBase<uint>, IMessagePackFormatter<uint3x2>
    {
        public void Serialize(ref MessagePackWriter writer, uint3x2 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 6);
            base.Serialize(ref writer, span, options);
        }

        public uint3x2 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<uint>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new uint3x2(v);
                default:
                    var value = default(uint3x2);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 6);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Uint3x3Formatter : MatrixFormatterBase<uint>, IMessagePackFormatter<uint3x3>
    {
        public void Serialize(ref MessagePackWriter writer, uint3x3 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 9);
            base.Serialize(ref writer, span, options);
        }

        public uint3x3 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<uint>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new uint3x3(v);
                default:
                    var value = default(uint3x3);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 9);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Uint3x4Formatter : MatrixFormatterBase<uint>, IMessagePackFormatter<uint3x4>
    {
        public void Serialize(ref MessagePackWriter writer, uint3x4 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 12);
            base.Serialize(ref writer, span, options);
        }

        public uint3x4 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<uint>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new uint3x4(v);
                default:
                    var value = default(uint3x4);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 12);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Uint4x2Formatter : MatrixFormatterBase<uint>, IMessagePackFormatter<uint4x2>
    {
        public void Serialize(ref MessagePackWriter writer, uint4x2 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 8);
            base.Serialize(ref writer, span, options);
        }

        public uint4x2 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<uint>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new uint4x2(v);
                default:
                    var value = default(uint4x2);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 8);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Uint4x3Formatter : MatrixFormatterBase<uint>, IMessagePackFormatter<uint4x3>
    {
        public void Serialize(ref MessagePackWriter writer, uint4x3 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 12);
            base.Serialize(ref writer, span, options);
        }

        public uint4x3 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<uint>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new uint4x3(v);
                default:
                    var value = default(uint4x3);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 12);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Uint4x4Formatter : MatrixFormatterBase<uint>, IMessagePackFormatter<uint4x4>
    {
        public void Serialize(ref MessagePackWriter writer, uint4x4 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 16);
            base.Serialize(ref writer, span, options);
        }

        public uint4x4 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<uint>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new uint4x4(v);
                default:
                    var value = default(uint4x4);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 16);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Float2x2Formatter : MatrixFormatterBase<float>, IMessagePackFormatter<float2x2>
    {
        public void Serialize(ref MessagePackWriter writer, float2x2 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 4);
            base.Serialize(ref writer, span, options);
        }

        public float2x2 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<float>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new float2x2(v);
                default:
                    var value = default(float2x2);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 4);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Float2x3Formatter : MatrixFormatterBase<float>, IMessagePackFormatter<float2x3>
    {
        public void Serialize(ref MessagePackWriter writer, float2x3 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 6);
            base.Serialize(ref writer, span, options);
        }

        public float2x3 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<float>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new float2x3(v);
                default:
                    var value = default(float2x3);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 6);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Float2x4Formatter : MatrixFormatterBase<float>, IMessagePackFormatter<float2x4>
    {
        public void Serialize(ref MessagePackWriter writer, float2x4 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 8);
            base.Serialize(ref writer, span, options);
        }

        public float2x4 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<float>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new float2x4(v);
                default:
                    var value = default(float2x4);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 8);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Float3x2Formatter : MatrixFormatterBase<float>, IMessagePackFormatter<float3x2>
    {
        public void Serialize(ref MessagePackWriter writer, float3x2 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 6);
            base.Serialize(ref writer, span, options);
        }

        public float3x2 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<float>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new float3x2(v);
                default:
                    var value = default(float3x2);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 6);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Float3x3Formatter : MatrixFormatterBase<float>, IMessagePackFormatter<float3x3>
    {
        public void Serialize(ref MessagePackWriter writer, float3x3 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 9);
            base.Serialize(ref writer, span, options);
        }

        public float3x3 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<float>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new float3x3(v);
                default:
                    var value = default(float3x3);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 9);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Float3x4Formatter : MatrixFormatterBase<float>, IMessagePackFormatter<float3x4>
    {
        public void Serialize(ref MessagePackWriter writer, float3x4 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 12);
            base.Serialize(ref writer, span, options);
        }

        public float3x4 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<float>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new float3x4(v);
                default:
                    var value = default(float3x4);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 12);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Float4x2Formatter : MatrixFormatterBase<float>, IMessagePackFormatter<float4x2>
    {
        public void Serialize(ref MessagePackWriter writer, float4x2 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 8);
            base.Serialize(ref writer, span, options);
        }

        public float4x2 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<float>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new float4x2(v);
                default:
                    var value = default(float4x2);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 8);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Float4x3Formatter : MatrixFormatterBase<float>, IMessagePackFormatter<float4x3>
    {
        public void Serialize(ref MessagePackWriter writer, float4x3 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 12);
            base.Serialize(ref writer, span, options);
        }

        public float4x3 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<float>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new float4x3(v);
                default:
                    var value = default(float4x3);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 12);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Float4x4Formatter : MatrixFormatterBase<float>, IMessagePackFormatter<float4x4>
    {
        public void Serialize(ref MessagePackWriter writer, float4x4 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 16);
            base.Serialize(ref writer, span, options);
        }

        public float4x4 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<float>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new float4x4(v);
                default:
                    var value = default(float4x4);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 16);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Double2x2Formatter : MatrixFormatterBase<double>, IMessagePackFormatter<double2x2>
    {
        public void Serialize(ref MessagePackWriter writer, double2x2 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 4);
            base.Serialize(ref writer, span, options);
        }

        public double2x2 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<double>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new double2x2(v);
                default:
                    var value = default(double2x2);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 4);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Double2x3Formatter : MatrixFormatterBase<double>, IMessagePackFormatter<double2x3>
    {
        public void Serialize(ref MessagePackWriter writer, double2x3 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 6);
            base.Serialize(ref writer, span, options);
        }

        public double2x3 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<double>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new double2x3(v);
                default:
                    var value = default(double2x3);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 6);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Double2x4Formatter : MatrixFormatterBase<double>, IMessagePackFormatter<double2x4>
    {
        public void Serialize(ref MessagePackWriter writer, double2x4 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 8);
            base.Serialize(ref writer, span, options);
        }

        public double2x4 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<double>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new double2x4(v);
                default:
                    var value = default(double2x4);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 8);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Double3x2Formatter : MatrixFormatterBase<double>, IMessagePackFormatter<double3x2>
    {
        public void Serialize(ref MessagePackWriter writer, double3x2 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 6);
            base.Serialize(ref writer, span, options);
        }

        public double3x2 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<double>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new double3x2(v);
                default:
                    var value = default(double3x2);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 6);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Double3x3Formatter : MatrixFormatterBase<double>, IMessagePackFormatter<double3x3>
    {
        public void Serialize(ref MessagePackWriter writer, double3x3 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 9);
            base.Serialize(ref writer, span, options);
        }

        public double3x3 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<double>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new double3x3(v);
                default:
                    var value = default(double3x3);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 9);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Double3x4Formatter : MatrixFormatterBase<double>, IMessagePackFormatter<double3x4>
    {
        public void Serialize(ref MessagePackWriter writer, double3x4 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 12);
            base.Serialize(ref writer, span, options);
        }

        public double3x4 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<double>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new double3x4(v);
                default:
                    var value = default(double3x4);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 12);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Double4x2Formatter : MatrixFormatterBase<double>, IMessagePackFormatter<double4x2>
    {
        public void Serialize(ref MessagePackWriter writer, double4x2 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 8);
            base.Serialize(ref writer, span, options);
        }

        public double4x2 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<double>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new double4x2(v);
                default:
                    var value = default(double4x2);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 8);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Double4x3Formatter : MatrixFormatterBase<double>, IMessagePackFormatter<double4x3>
    {
        public void Serialize(ref MessagePackWriter writer, double4x3 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 12);
            base.Serialize(ref writer, span, options);
        }

        public double4x3 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<double>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new double4x3(v);
                default:
                    var value = default(double4x3);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 12);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

    public sealed class Double4x4Formatter : MatrixFormatterBase<double>, IMessagePackFormatter<double4x4>
    {
        public void Serialize(ref MessagePackWriter writer, double4x4 value, MessagePackSerializerOptions options)
        {
            var span = MemoryMarshal.CreateReadOnlySpan(ref value.c0.x, 16);
            base.Serialize(ref writer, span, options);
        }

        public double4x4 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            var length = reader.ReadArrayHeader();
            switch (length)
            {
                case 1:
                    var formatter = options.Resolver.GetFormatterWithVerify<double>();
                    var v = formatter.Deserialize(ref reader, options);
                    return new double4x4(v);
                default:
                    var value = default(double4x4);
                    var span = MemoryMarshal.CreateSpan(ref value.c0.x, 16);
                    base.Deserialize(ref reader, span, length, options);
                    return value;
            }
        }
    }

}
#endif
