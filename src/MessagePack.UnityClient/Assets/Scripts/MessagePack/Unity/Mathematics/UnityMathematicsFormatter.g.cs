// <auto-generated />

#if ENABLE_UNITY_MATHEMATICS
using System;
using MessagePack.Formatters;
using global::Unity.Mathematics;

namespace MessagePack.Unity.Mathematics
{
    public abstract class Vector2FormatterBase<TResult, TValue> : IMessagePackFormatter<TResult>
        where TResult : struct
        where TValue : struct
    {
        public abstract void Serialize(ref MessagePackWriter writer, TResult value, MessagePackSerializerOptions options);

        public TResult Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            TValue x, y;
            var resolver = options.Resolver.GetFormatterWithVerify<TValue>();
            switch (reader.ReadArrayHeader())
            {
                case 1:
                    x = resolver.Deserialize(ref reader, options);
                    return Create(x);
                case 2:
                    x = resolver.Deserialize(ref reader, options);
                    y = resolver.Deserialize(ref reader, options);
                    return Create(x, y);
            }

            throw new InvalidOperationException();
        }
        
        protected abstract TResult Create(TValue x);
        protected abstract TResult Create(TValue x, TValue y);
    }

    public abstract class Vector3FormatterBase<TResult, TValue> : IMessagePackFormatter<TResult>
        where TResult : struct
        where TValue : struct
    {
        public abstract void Serialize(ref MessagePackWriter writer, TResult value, MessagePackSerializerOptions options);

        public TResult Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            TValue x, y, z;
            var resolver = options.Resolver.GetFormatterWithVerify<TValue>();
            switch (reader.ReadArrayHeader())
            {
                case 1:
                    x = resolver.Deserialize(ref reader, options);
                    return Create(x);
                case 3:
                    x = resolver.Deserialize(ref reader, options);
                    y = resolver.Deserialize(ref reader, options);
                    z = resolver.Deserialize(ref reader, options);
                    return Create(x, y, z);
            }

            throw new InvalidOperationException();
        }
        
        protected abstract TResult Create(TValue x);
        protected abstract TResult Create(TValue x, TValue y, TValue z);
    }

    public abstract class Vector4FormatterBase<TResult, TValue> : IMessagePackFormatter<TResult>
        where TResult : struct
        where TValue : struct
    {
        public abstract void Serialize(ref MessagePackWriter writer, TResult value, MessagePackSerializerOptions options);

        public TResult Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.IsNil)
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            TValue x, y, z, w;
            var resolver = options.Resolver.GetFormatterWithVerify<TValue>();
            switch (reader.ReadArrayHeader())
            {
                case 1:
                    x = resolver.Deserialize(ref reader, options);
                    return Create(x);
                case 4:
                    x = resolver.Deserialize(ref reader, options);
                    y = resolver.Deserialize(ref reader, options);
                    z = resolver.Deserialize(ref reader, options);
                    w = resolver.Deserialize(ref reader, options);
                    return Create(x, y, z, w);
            }

            throw new InvalidOperationException();
        }
        
        protected abstract TResult Create(TValue x);
        protected abstract TResult Create(TValue x, TValue y, TValue z, TValue w);
    }

    public sealed class Int2Formatter : Vector2FormatterBase<int2, int>
    {
        public override void Serialize(ref MessagePackWriter writer, int2 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override int2 Create(int x)
        {
            return new int2(x);
        }

        protected override int2 Create(int x, int y)
        {
            return new int2(x, y);
        }
    }

    public sealed class Int3Formatter : Vector3FormatterBase<int3, int>
    {
        public override void Serialize(ref MessagePackWriter writer, int3 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override int3 Create(int x)
        {
            return new int3(x);
        }

        protected override int3 Create(int x, int y, int z)
        {
            return new int3(x, y, z);
        }
    }

    public sealed class Int4Formatter : Vector4FormatterBase<int4, int>
    {
        public override void Serialize(ref MessagePackWriter writer, int4 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override int4 Create(int x)
        {
            return new int4(x);
        }

        protected override int4 Create(int x, int y, int z, int w)
        {
            return new int4(x, y, z, w);
        }
    }

    public sealed class Uint2Formatter : Vector2FormatterBase<uint2, uint>
    {
        public override void Serialize(ref MessagePackWriter writer, uint2 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override uint2 Create(uint x)
        {
            return new uint2(x);
        }

        protected override uint2 Create(uint x, uint y)
        {
            return new uint2(x, y);
        }
    }

    public sealed class Uint3Formatter : Vector3FormatterBase<uint3, uint>
    {
        public override void Serialize(ref MessagePackWriter writer, uint3 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override uint3 Create(uint x)
        {
            return new uint3(x);
        }

        protected override uint3 Create(uint x, uint y, uint z)
        {
            return new uint3(x, y, z);
        }
    }

    public sealed class Uint4Formatter : Vector4FormatterBase<uint4, uint>
    {
        public override void Serialize(ref MessagePackWriter writer, uint4 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override uint4 Create(uint x)
        {
            return new uint4(x);
        }

        protected override uint4 Create(uint x, uint y, uint z, uint w)
        {
            return new uint4(x, y, z, w);
        }
    }

    public sealed class Float2Formatter : Vector2FormatterBase<float2, float>
    {
        public override void Serialize(ref MessagePackWriter writer, float2 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override float2 Create(float x)
        {
            return new float2(x);
        }

        protected override float2 Create(float x, float y)
        {
            return new float2(x, y);
        }
    }

    public sealed class Float3Formatter : Vector3FormatterBase<float3, float>
    {
        public override void Serialize(ref MessagePackWriter writer, float3 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override float3 Create(float x)
        {
            return new float3(x);
        }

        protected override float3 Create(float x, float y, float z)
        {
            return new float3(x, y, z);
        }
    }

    public sealed class Float4Formatter : Vector4FormatterBase<float4, float>
    {
        public override void Serialize(ref MessagePackWriter writer, float4 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override float4 Create(float x)
        {
            return new float4(x);
        }

        protected override float4 Create(float x, float y, float z, float w)
        {
            return new float4(x, y, z, w);
        }
    }

    public sealed class Double2Formatter : Vector2FormatterBase<double2, double>
    {
        public override void Serialize(ref MessagePackWriter writer, double2 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override double2 Create(double x)
        {
            return new double2(x);
        }

        protected override double2 Create(double x, double y)
        {
            return new double2(x, y);
        }
    }

    public sealed class Double3Formatter : Vector3FormatterBase<double3, double>
    {
        public override void Serialize(ref MessagePackWriter writer, double3 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override double3 Create(double x)
        {
            return new double3(x);
        }

        protected override double3 Create(double x, double y, double z)
        {
            return new double3(x, y, z);
        }
    }

    public sealed class Double4Formatter : Vector4FormatterBase<double4, double>
    {
        public override void Serialize(ref MessagePackWriter writer, double4 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override double4 Create(double x)
        {
            return new double4(x);
        }

        protected override double4 Create(double x, double y, double z, double w)
        {
            return new double4(x, y, z, w);
        }
    }

    public sealed class Half2Formatter : Vector2FormatterBase<half2, half>
    {
        public override void Serialize(ref MessagePackWriter writer, half2 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override half2 Create(half x)
        {
            return new half2(x);
        }

        protected override half2 Create(half x, half y)
        {
            return new half2(x, y);
        }
    }

    public sealed class Half3Formatter : Vector3FormatterBase<half3, half>
    {
        public override void Serialize(ref MessagePackWriter writer, half3 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override half3 Create(half x)
        {
            return new half3(x);
        }

        protected override half3 Create(half x, half y, half z)
        {
            return new half3(x, y, z);
        }
    }

    public sealed class Half4Formatter : Vector4FormatterBase<half4, half>
    {
        public override void Serialize(ref MessagePackWriter writer, half4 value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        protected override half4 Create(half x)
        {
            return new half4(x);
        }

        protected override half4 Create(half x, half y, half z, half w)
        {
            return new half4(x, y, z, w);
        }
    }

}
#endif
